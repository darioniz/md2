{"version":3,"file":"datepicker-input.js","sourceRoot":"","sources":["../../../src/lib/datepicker/datepicker-input.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  AfterContentInit,\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  forwardRef,\r\n  Inject,\r\n  Input,\r\n  OnDestroy,\r\n  Optional,\r\n  Renderer2\r\n} from '@angular/core';\r\nimport {Md2Datepicker2} from './datepicker2';\r\nimport {\r\n  AbstractControl,\r\n  ControlValueAccessor,\r\n  NG_VALIDATORS,\r\n  NG_VALUE_ACCESSOR,\r\n  ValidationErrors,\r\n  Validator,\r\n  ValidatorFn,\r\n  Validators\r\n} from '@angular/forms';\r\nimport {Subscription} from 'rxjs/Subscription';\r\nimport {DOWN_ARROW} from '../core/keyboard/keycodes';\r\nimport {DateAdapter} from '../core/datetime/index';\r\nimport {MD_DATE_FORMATS, MdDateFormats} from '../core/datetime/date-formats';\r\n\r\n\r\nexport const MD2_DATEPICKER_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => Md2DatepickerInput),\r\n  multi: true\r\n};\r\n\r\n\r\nexport const MD2_DATEPICKER_VALIDATORS: any = {\r\n  provide: NG_VALIDATORS,\r\n  useExisting: forwardRef(() => Md2DatepickerInput),\r\n  multi: true\r\n};\r\n\r\n\r\n/** Directive used to connect an input to a MdDatepicker. */\r\n@Directive({\r\n  selector: 'input[md2Datepicker]',\r\n  providers: [MD2_DATEPICKER_VALUE_ACCESSOR, MD2_DATEPICKER_VALIDATORS],\r\n  host: {\r\n    '[attr.aria-expanded]': '_datepicker?.opened || \"false\"',\r\n    '[attr.aria-haspopup]': 'true',\r\n    '[attr.aria-owns]': '_datepicker?.id',\r\n    '[attr.min]': 'min ? _dateAdapter.getISODateString(min) : null',\r\n    '[attr.max]': 'max ? _dateAdapter.getISODateString(max) : null',\r\n    '(input)': '_onInput($event.target.value)',\r\n    '(blur)': '_onTouched()',\r\n    '(keydown)': '_onKeydown($event)',\r\n  }\r\n})\r\nexport class Md2DatepickerInput<D> implements AfterContentInit, ControlValueAccessor, OnDestroy,\r\n    Validator {\r\n  /** The datepicker that this input is associated with. */\r\n  @Input()\r\n  set md2Datepicker(value: Md2Datepicker2<D>) {\r\n    if (value) {\r\n      this._datepicker = value;\r\n      this._datepicker._registerInput(this);\r\n    }\r\n  }\r\n  _datepicker: Md2Datepicker2<D>;\r\n\r\n  @Input() set md2DatepickerFilter(filter: (date: D | null) => boolean) {\r\n    this._dateFilter = filter;\r\n    this._validatorOnChange();\r\n  }\r\n  _dateFilter: (date: D | null) => boolean;\r\n\r\n  /** The value of the input. */\r\n  @Input()\r\n  get value(): D {\r\n    return this._dateAdapter.parse(this._elementRef.nativeElement.value,\r\n        this._dateFormats.parse.dateInput);\r\n  }\r\n  set value(value: D) {\r\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\r\n    let oldDate = this.value;\r\n    this._renderer.setProperty(this._elementRef.nativeElement, 'value',\r\n        date ? this._dateAdapter.format(date, this._dateFormats.display.dateInput) : '');\r\n    if (!this._dateAdapter.sameDate(oldDate, date)) {\r\n      this._valueChange.emit(date);\r\n    }\r\n  }\r\n\r\n  /** The minimum valid date. */\r\n  @Input()\r\n  get min(): D { return this._min; }\r\n  set min(value: D) {\r\n    this._min = value;\r\n    this._validatorOnChange();\r\n  }\r\n  private _min: D;\r\n\r\n  /** The maximum valid date. */\r\n  @Input()\r\n  get max(): D { return this._max; }\r\n  set max(value: D) {\r\n    this._max = value;\r\n    this._validatorOnChange();\r\n  }\r\n  private _max: D;\r\n\r\n  /** Emits when the value changes (either due to user input or programmatic change). */\r\n  _valueChange = new EventEmitter<D>();\r\n\r\n  _onTouched = () => {};\r\n\r\n  private _cvaOnChange = (value: any) => {};\r\n\r\n  private _validatorOnChange = () => {};\r\n\r\n  private _datepickerSubscription: Subscription;\r\n\r\n  /** The form control validator for the min date. */\r\n  private _minValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    return (!this.min || !control.value ||\r\n        this._dateAdapter.compareDate(this.min, control.value) <= 0) ?\r\n        null : {'md2DatepickerMin': {'min': this.min, 'actual': control.value}};\r\n  }\r\n\r\n  /** The form control validator for the max date. */\r\n  private _maxValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    return (!this.max || !control.value ||\r\n        this._dateAdapter.compareDate(this.max, control.value) >= 0) ?\r\n        null : {'md2DatepickerMax': {'max': this.max, 'actual': control.value}};\r\n  }\r\n\r\n  /** The form control validator for the date filter. */\r\n  private _filterValidator: ValidatorFn = (control: AbstractControl): ValidationErrors | null => {\r\n    return !this._dateFilter || !control.value || this._dateFilter(control.value) ?\r\n        null : {'md2DatepickerFilter': true};\r\n  }\r\n\r\n  /** The combined form control validator for this input. */\r\n  private _validator: ValidatorFn =\r\n      Validators.compose([this._minValidator, this._maxValidator, this._filterValidator]);\r\n\r\n  constructor(\r\n      private _elementRef: ElementRef,\r\n      private _renderer: Renderer2,\r\n      @Optional() private _dateAdapter: DateAdapter<D>,\r\n      @Optional() @Inject(MD_DATE_FORMATS) private _dateFormats: MdDateFormats) {\r\n    if (!this._dateAdapter) {\r\n      throw Error('DateAdapter');\r\n    }\r\n    if (!this._dateFormats) {\r\n      throw Error('MD2_DATE_FORMATS');\r\n    }\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    if (this._datepicker) {\r\n      this._datepickerSubscription =\r\n          this._datepicker.selectedChanged.subscribe((selected: D) => {\r\n            this.value = selected;\r\n            this._cvaOnChange(selected);\r\n          });\r\n    }\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._datepickerSubscription) {\r\n      this._datepickerSubscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  registerOnValidatorChange(fn: () => void): void {\r\n    this._validatorOnChange = fn;\r\n  }\r\n\r\n  validate(c: AbstractControl): ValidationErrors | null {\r\n    return this._validator ? this._validator(c) : null;\r\n  }\r\n\r\n  /**\r\n   * Gets the element that the datepicker popup should be connected to.\r\n   * @return The element to connect the popup to.\r\n   */\r\n  getPopupConnectionElementRef(): ElementRef {\r\n    return this._elementRef;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor\r\n  writeValue(value: D): void {\r\n    this.value = value;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor\r\n  registerOnChange(fn: (value: any) => void): void {\r\n    this._cvaOnChange = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor\r\n  registerOnTouched(fn: () => void): void {\r\n    this._onTouched = fn;\r\n  }\r\n\r\n  // Implemented as part of ControlValueAccessor\r\n  setDisabledState(disabled: boolean): void {\r\n    this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', disabled);\r\n  }\r\n\r\n  _onKeydown(event: KeyboardEvent) {\r\n    if (event.altKey && event.keyCode === DOWN_ARROW) {\r\n      this._datepicker.open();\r\n      event.preventDefault();\r\n    }\r\n  }\r\n\r\n  _onInput(value: string) {\r\n    let date = this._dateAdapter.parse(value, this._dateFormats.parse.dateInput);\r\n    this._cvaOnChange(date);\r\n    this._valueChange.emit(date);\r\n  }\r\n}\r\n"]}