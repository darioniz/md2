{"version":3,"file":"calendar-body.js","sourceRoot":"","sources":["../../../src/lib/datepicker/calendar-body.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,uBAAuB,EACvB,SAAS,EACT,YAAY,EACZ,KAAK,EACL,MAAM,EACN,iBAAiB,EAClB,MAAM,eAAe,CAAC;AAGvB;;;GAGG;AACH;IACE,yBAAmB,KAAa,EACb,YAAoB,EACpB,SAAiB,EACjB,OAAgB;QAHhB,UAAK,GAAL,KAAK,CAAQ;QACb,iBAAY,GAAZ,YAAY,CAAQ;QACpB,cAAS,GAAT,SAAS,CAAQ;QACjB,YAAO,GAAP,OAAO,CAAS;IAAG,CAAC;IACzC,sBAAC;AAAD,CAAC,AALD,IAKC;;AAGD;;;GAGG;AAYH,IAAa,eAAe;IAX5B;QA2BE,0CAA0C;QACjC,YAAO,GAAG,CAAC,CAAC;QAErB,oDAAoD;QAC3C,2BAAsB,GAAG,KAAK,CAAC;QAExC,uDAAuD;QAC9C,eAAU,GAAG,CAAC,CAAC;QAExB,0CAA0C;QAChC,wBAAmB,GAAG,IAAI,YAAY,EAAU,CAAC;IAyB7D,CAAC;IAvBC,sCAAY,GAAZ,UAAa,IAAqB;QAChC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAClD,MAAM,CAAC;QACT,CAAC;QACD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC;IAGD,sBAAI,4CAAe;QADnB,2EAA2E;aAC3E;YACE,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM;gBACvD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC;QAC7C,CAAC;;;OAAA;IAED,uCAAa,GAAb,UAAc,QAAgB,EAAE,QAAgB;QAC9C,IAAI,UAAU,GAAG,QAAQ,GAAG,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC;QAEpD,sEAAsE;QACtE,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;YACb,UAAU,IAAI,IAAI,CAAC,eAAe,CAAC;QACrC,CAAC;QAED,MAAM,CAAC,UAAU,IAAI,IAAI,CAAC,UAAU,CAAC;IACvC,CAAC;IACH,sBAAC;AAAD,CAAC,AAnDD,IAmDC;AAjDU;IAAR,KAAK,EAAE;;8CAAe;AAGd;IAAR,KAAK,EAAE;;6CAA2B;AAG1B;IAAR,KAAK,EAAE;;mDAAoB;AAGnB;IAAR,KAAK,EAAE;;sDAAuB;AAGtB;IAAR,KAAK,EAAE;;8DAA+B;AAG9B;IAAR,KAAK,EAAE;;gDAAa;AAGZ;IAAR,KAAK,EAAE;;+DAAgC;AAG/B;IAAR,KAAK,EAAE;;mDAAgB;AAGd;IAAT,MAAM,EAAE;;4DAAkD;AA1BhD,eAAe;IAX3B,SAAS,CAAC;QACT,QAAQ,EAAE,MAAM,CAAC,EAAE;QACnB,QAAQ,EAAE,qBAAqB;QAC/B,WAAW,EAAE,oBAAoB;QACjC,SAAS,EAAE,CAAC,mBAAmB,CAAC;QAChC,IAAI,EAAE;YACJ,OAAO,EAAE,mBAAmB;SAC7B;QACD,aAAa,EAAE,iBAAiB,CAAC,IAAI;QACrC,eAAe,EAAE,uBAAuB,CAAC,MAAM;KAChD,CAAC;GACW,eAAe,CAmD3B;SAnDY,eAAe","sourcesContent":["import {\r\n  ChangeDetectionStrategy,\r\n  Component,\r\n  EventEmitter,\r\n  Input,\r\n  Output,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\n\r\n\r\n/**\r\n * An internal class that represents the data corresponding to a single calendar cell.\r\n * @docs-private\r\n */\r\nexport class Md2CalendarCell {\r\n  constructor(public value: number,\r\n              public displayValue: string,\r\n              public ariaLabel: string,\r\n              public enabled: boolean) {}\r\n}\r\n\r\n\r\n/**\r\n * An internal component used to display calendar data in a table.\r\n * @docs-private\r\n */\r\n@Component({\r\n  moduleId: module.id,\r\n  selector: '[md2-calendar-body]',\r\n  templateUrl: 'calendar-body.html',\r\n  styleUrls: ['calendar-body.css'],\r\n  host: {\r\n    'class': 'md2-calendar-body',\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class Md2CalendarBody {\r\n  /** The label for the table. (e.g. \"Jan 2017\"). */\r\n  @Input() label: string;\r\n\r\n  /** The cells to display in the table. */\r\n  @Input() rows: Md2CalendarCell[][];\r\n\r\n  /** The value in the table that corresponds to today. */\r\n  @Input() todayValue: number;\r\n\r\n  /** The value in the table that is currently selected. */\r\n  @Input() selectedValue: number;\r\n\r\n  /** The minimum number of free cells needed to fit the label in the first row. */\r\n  @Input() labelMinRequiredCells: number;\r\n\r\n  /** The number of columns in the table. */\r\n  @Input() numCols = 7;\r\n\r\n  /** Whether to allow selection of disabled cells. */\r\n  @Input() allowDisabledSelection = false;\r\n\r\n  /** The cell number of the active cell in the table. */\r\n  @Input() activeCell = 0;\r\n\r\n  /** Emits when a new value is selected. */\r\n  @Output() selectedValueChange = new EventEmitter<number>();\r\n\r\n  _cellClicked(cell: Md2CalendarCell): void {\r\n    if (!this.allowDisabledSelection && !cell.enabled) {\r\n      return;\r\n    }\r\n    this.selectedValueChange.emit(cell.value);\r\n  }\r\n\r\n  /** The number of blank cells to put at the beginning for the first row. */\r\n  get _firstRowOffset(): number {\r\n    return this.rows && this.rows.length && this.rows[0].length ?\r\n        this.numCols - this.rows[0].length : 0;\r\n  }\r\n\r\n  _isActiveCell(rowIndex: number, colIndex: number): boolean {\r\n    let cellNumber = rowIndex * this.numCols + colIndex;\r\n\r\n    // Account for the fact that the first row may not have as many cells.\r\n    if (rowIndex) {\r\n      cellNumber -= this._firstRowOffset;\r\n    }\r\n\r\n    return cellNumber == this.activeCell;\r\n  }\r\n}\r\n"]}