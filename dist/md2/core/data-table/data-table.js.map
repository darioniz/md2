{"version":3,"file":"data-table.js","sourceRoot":"","sources":["../../../../src/lib/core/data-table/data-table.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ContentChild,\r\n  ContentChildren,\r\n  Directive,\r\n  Input,\r\n  QueryList,\r\n  ViewChild,\r\n  ViewContainerRef,\r\n  ViewEncapsulation\r\n} from '@angular/core';\r\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\r\nimport 'rxjs/add/operator/let';\r\nimport 'rxjs/add/operator/debounceTime';\r\nimport 'rxjs/add/observable/combineLatest';\r\nimport {CollectionViewer, DataSource} from './data-source';\r\nimport {CdkCellOutlet, CdkHeaderRowDef, CdkRowDef} from './row';\r\nimport {CdkCellDef, CdkColumnDef, CdkHeaderCellDef} from './cell';\r\n\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert data rows.\r\n * @docs-private\r\n */\r\n@Directive({selector: '[rowPlaceholder]'})\r\nexport class RowPlaceholder {\r\n  constructor(public viewContainer: ViewContainerRef) { }\r\n}\r\n\r\n/**\r\n * Provides a handle for the table to grab the view container's ng-container to insert the header.\r\n * @docs-private\r\n */\r\n@Directive({selector: '[headerRowPlaceholder]'})\r\nexport class HeaderRowPlaceholder {\r\n  constructor(public viewContainer: ViewContainerRef) { }\r\n}\r\n\r\n/**\r\n * A data table that connects with a data source to retrieve data and renders\r\n * a header row and data rows. Updates the rows when new data is provided by the data source.\r\n */\r\n@Component({\r\n  selector: 'cdk-table',\r\n  template: `\r\n    <ng-container headerRowPlaceholder></ng-container>\r\n    <ng-container rowPlaceholder></ng-container>\r\n  `,\r\n  host: {\r\n    'class': 'cdk-table',\r\n    'role': 'grid' // TODO(andrewseguin): Allow the user to choose either grid or treegrid\r\n  },\r\n  encapsulation: ViewEncapsulation.None,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CdkTable implements CollectionViewer {\r\n  /**\r\n   * Provides a stream containing the latest data array to render. Influenced by the table's\r\n   * stream of view window (what rows are currently on screen).\r\n   */\r\n  @Input() dataSource: DataSource<any>;\r\n\r\n  // TODO(andrewseguin): Remove max value as the end index\r\n  // and instead calculate the view on init and scroll.\r\n  /**\r\n   * Stream containing the latest information on what rows are being displayed on screen.\r\n   * Can be used by the data source to as a heuristic of what data should be provided.\r\n   */\r\n  viewChanged =\r\n      new BehaviorSubject<{start: number, end: number}>({start: 0, end: Number.MAX_VALUE});\r\n\r\n  /**\r\n   * Map of all the user's defined columns identified by name.\r\n   * Contains the header and data-cell templates.\r\n   */\r\n  private _columnDefinitionsByName = new Map<string,  CdkColumnDef>();\r\n\r\n  // Placeholders within the table's template where the header and data rows will be inserted.\r\n  @ViewChild(RowPlaceholder) _rowPlaceholder: RowPlaceholder;\r\n  @ViewChild(HeaderRowPlaceholder) _headerRowPlaceholder: HeaderRowPlaceholder;\r\n\r\n  /**\r\n   * The column definitions provided by the user that contain what the header and cells should\r\n   * render for each column.\r\n   */\r\n  @ContentChildren(CdkColumnDef) _columnDefinitions: QueryList<CdkColumnDef>;\r\n\r\n  /** Template used as the header container. */\r\n  @ContentChild(CdkHeaderRowDef) _headerDefinition: CdkHeaderRowDef;\r\n\r\n  /** Set of templates that used as the data row containers. */\r\n  @ContentChildren(CdkRowDef) _rowDefinitions: QueryList<CdkRowDef>;\r\n\r\n  constructor(private _changeDetectorRef: ChangeDetectorRef) {\r\n    console.warn('The data table is still in active development ' +\r\n        'and should be considered unstable.');\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // TODO(andrewseguin): Disconnect from the data source so\r\n    // that it can unsubscribe from its streams.\r\n  }\r\n\r\n  ngOnInit() {\r\n    // TODO(andrewseguin): Setup a listener for scroll events\r\n    //   and emit the calculated view to this.viewChanged\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    // TODO(andrewseguin): Throw an error if two columns share the same name\r\n    this._columnDefinitions.forEach(columnDef => {\r\n      this._columnDefinitionsByName.set(columnDef.name, columnDef);\r\n    });\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    // TODO(andrewseguin): Re-render the header when the header's columns change.\r\n    this.renderHeaderRow();\r\n\r\n    // TODO(andrewseguin): Re-render rows when their list of columns change.\r\n    // TODO(andrewseguin): If the data source is not\r\n    //   present after view init, connect it when it is defined.\r\n    // TODO(andrewseguin): Unsubscribe from this on destroy.\r\n    this.dataSource.connect(this).subscribe((rowsData: any[]) => {\r\n      // TODO(andrewseguin): Add a differ that will check if the data has changed,\r\n      //   rather than re-rendering all rows\r\n      this._rowPlaceholder.viewContainer.clear();\r\n      rowsData.forEach(rowData => this.insertRow(rowData));\r\n      this._changeDetectorRef.markForCheck();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Create the embedded view for the header template and place it in the header row view container.\r\n   */\r\n  renderHeaderRow() {\r\n    const cells = this.getHeaderCellTemplatesForRow(this._headerDefinition);\r\n\r\n    // TODO(andrewseguin): add some code to enforce that exactly\r\n    // one CdkCellOutlet was instantiated as a result\r\n    // of `createEmbeddedView`.\r\n    this._headerRowPlaceholder.viewContainer\r\n        .createEmbeddedView(this._headerDefinition.template, {cells});\r\n    CdkCellOutlet.mostRecentCellOutlet.cells = cells;\r\n    CdkCellOutlet.mostRecentCellOutlet.context = {};\r\n  }\r\n\r\n  /**\r\n   * Create the embedded view for the data row template and place it in the correct index location\r\n   * within the data row view container.\r\n   */\r\n  insertRow(rowData: any) {\r\n    // TODO(andrewseguin): Add when predicates to the row definitions\r\n    //   to find the right template to used based on\r\n    //   the data rather than choosing the first row definition.\r\n    const row = this._rowDefinitions.first;\r\n\r\n    // TODO(andrewseguin): Add more context, such as first/last/isEven/etc\r\n    const context = {$implicit: rowData};\r\n\r\n    // TODO(andrewseguin): add some code to enforce that exactly one\r\n    //   CdkCellOutlet was instantiated as a result  of `createEmbeddedView`.\r\n    this._rowPlaceholder.viewContainer.createEmbeddedView(row.template, context);\r\n\r\n    // Insert empty cells if there is no data to improve rendering time.\r\n    CdkCellOutlet.mostRecentCellOutlet.cells = rowData ? this.getCellTemplatesForRow(row) : [];\r\n    CdkCellOutlet.mostRecentCellOutlet.context = context;\r\n  }\r\n\r\n  /**\r\n   * Returns the cell template definitions to insert into the header\r\n   * as defined by its list of columns to display.\r\n   */\r\n  getHeaderCellTemplatesForRow(headerDef: CdkHeaderRowDef): CdkHeaderCellDef[] {\r\n    return headerDef.columns.map(columnId => {\r\n      return this._columnDefinitionsByName.get(columnId).headerCell;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns the cell template definitions to insert in the provided row\r\n   * as defined by its list of columns to display.\r\n   */\r\n  getCellTemplatesForRow(rowDef: CdkRowDef): CdkCellDef[] {\r\n    return rowDef.columns.map(columnId => {\r\n      return this._columnDefinitionsByName.get(columnId).cell;\r\n    });\r\n  }\r\n}\r\n"]}