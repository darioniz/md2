{"version":3,"file":"ripple.js","sourceRoot":"","sources":["../../../../src/lib/core/ripple/ripple.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  Inject,\r\n  NgZone,\r\n  OnChanges,\r\n  SimpleChanges,\r\n  OnDestroy,\r\n  InjectionToken,\r\n  Optional,\r\n} from '@angular/core';\r\nimport {RippleConfig, RippleRenderer} from './ripple-renderer';\r\nimport {RippleRef} from './ripple-ref';\r\nimport {ViewportRuler} from '../overlay/position/viewport-ruler';\r\nimport {Platform} from '../platform/platform';\r\n\r\nexport interface RippleGlobalOptions {\r\n  disabled?: boolean;\r\n  baseSpeedFactor?: number;\r\n}\r\n\r\n/** Injection token that can be used to specify the global ripple options. */\r\nexport const MD_RIPPLE_GLOBAL_OPTIONS =\r\n    new InjectionToken<RippleGlobalOptions>('md-ripple-global-options');\r\n\r\n@Directive({\r\n  selector: '[md-ripple], [mat-ripple], [mdRipple], [matRipple]',\r\n  exportAs: 'mdRipple',\r\n  host: {\r\n    'class': 'mat-ripple',\r\n    '[class.mat-ripple-unbounded]': 'unbounded'\r\n  }\r\n})\r\nexport class MdRipple implements OnChanges, OnDestroy {\r\n\r\n  /**\r\n   * The element that triggers the ripple when click events are received. Defaults to the\r\n   * directive's host element.\r\n   */\r\n  // Prevent TS metadata emit from referencing HTMLElement in ripple.js\r\n  // Otherwise running this code in a Node environment (e.g Universal) will not work.\r\n  @Input('mdRippleTrigger') trigger: HTMLElement|HTMLElement;\r\n\r\n  /**\r\n   * Whether the ripple always originates from the center of the host element's bounds, rather\r\n   * than originating from the location of the click event.\r\n   */\r\n  @Input('mdRippleCentered') centered: boolean;\r\n\r\n  /**\r\n   * Whether click events will not trigger the ripple. It can still be triggered by manually\r\n   * calling createRipple()\r\n   */\r\n  @Input('mdRippleDisabled') disabled: boolean;\r\n\r\n  /**\r\n   * If set, the radius in pixels of foreground ripples when fully expanded. If unset, the radius\r\n   * will be the distance from the center of the ripple to the furthest corner of the host element's\r\n   * bounding rectangle.\r\n   */\r\n  @Input('mdRippleRadius') radius: number = 0;\r\n\r\n  /**\r\n   * If set, the normal duration of ripple animations is divided by this value. For example,\r\n   * setting it to 0.5 will cause the animations to take twice as long.\r\n   * A changed speedFactor will not modify the fade-out duration of the ripples.\r\n   */\r\n  @Input('mdRippleSpeedFactor') speedFactor: number = 1;\r\n\r\n  /** Custom color for ripples. */\r\n  @Input('mdRippleColor') color: string;\r\n\r\n  /** Whether foreground ripples should be visible outside the component's bounds. */\r\n  @Input('mdRippleUnbounded') unbounded: boolean;\r\n\r\n  /** Renderer for the ripple DOM manipulations. */\r\n  private _rippleRenderer: RippleRenderer;\r\n\r\n  /** Options that are set globally for all ripples. */\r\n  private _globalOptions: RippleGlobalOptions;\r\n\r\n  constructor(\r\n    elementRef: ElementRef,\r\n    ngZone: NgZone,\r\n    ruler: ViewportRuler,\r\n    platform: Platform,\r\n    @Optional() @Inject(MD_RIPPLE_GLOBAL_OPTIONS) globalOptions: RippleGlobalOptions\r\n  ) {\r\n    this._rippleRenderer = new RippleRenderer(elementRef, ngZone, ruler, platform);\r\n    this._globalOptions = globalOptions ? globalOptions : {};\r\n\r\n    this._updateRippleRenderer();\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes['trigger'] && this.trigger) {\r\n      this._rippleRenderer.setTriggerElement(this.trigger);\r\n    }\r\n\r\n    this._updateRippleRenderer();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    // Set the trigger element to null to cleanup all listeners.\r\n    this._rippleRenderer.setTriggerElement(null);\r\n  }\r\n\r\n  /** Launches a manual ripple at the specified position. */\r\n  launch(pageX: number, pageY: number, config = this.rippleConfig): RippleRef {\r\n    return this._rippleRenderer.fadeInRipple(pageX, pageY, config);\r\n  }\r\n\r\n  /** Fades out all currently showing ripple elements. */\r\n  fadeOutAll() {\r\n    this._rippleRenderer.fadeOutAll();\r\n  }\r\n\r\n  /** Ripple configuration from the directive's input values. */\r\n  get rippleConfig(): RippleConfig {\r\n    return {\r\n      centered: this.centered,\r\n      speedFactor: this.speedFactor * (this._globalOptions.baseSpeedFactor || 1),\r\n      radius: this.radius,\r\n      color: this.color\r\n    };\r\n  }\r\n\r\n  /** Updates the ripple renderer with the latest ripple configuration. */\r\n  private _updateRippleRenderer() {\r\n    this._rippleRenderer.rippleDisabled = this._globalOptions.disabled || this.disabled;\r\n    this._rippleRenderer.rippleConfig = this.rippleConfig;\r\n  }\r\n}\r\n"]}