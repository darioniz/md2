{"version":3,"file":"focus-origin-monitor.js","sourceRoot":"","sources":["../../../../src/lib/core/style/focus-origin-monitor.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,SAAS,EACT,UAAU,EACV,YAAY,EACZ,UAAU,EACV,MAAM,EAEN,QAAQ,EACR,MAAM,EACN,SAAS,EACT,QAAQ,GACT,MAAM,eAAe,CAAC;AACvB,OAAO,EAAC,UAAU,EAAC,MAAM,iBAAiB,CAAC;AAC3C,OAAO,EAAC,OAAO,EAAC,MAAM,cAAc,CAAC;AACrC,OAAO,EAAC,QAAQ,EAAC,MAAM,sBAAsB,CAAC;AAE9C,OAAO,wBAAwB,CAAC;AAGhC,kGAAkG;AAClG,kDAAkD;AAClD,MAAM,CAAC,IAAM,eAAe,GAAG,GAAG,CAAC;AAcnC,iFAAiF;AAEjF,IAAa,kBAAkB;IAmB7B,4BAAoB,OAAe,EAAU,SAAmB;QAAhE,iBAEC;QAFmB,YAAO,GAAP,OAAO,CAAQ;QAAU,cAAS,GAAT,SAAS,CAAU;QAlBhE,iEAAiE;QACzD,YAAO,GAAgB,IAAI,CAAC;QAKpC,gDAAgD;QACxC,mBAAc,GAAG,KAAK,CAAC;QAQ/B,0DAA0D;QAClD,iBAAY,GAAG,IAAI,OAAO,EAAiC,CAAC;QAGlE,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,cAAM,OAAA,KAAI,CAAC,uBAAuB,EAAE,EAA9B,CAA8B,CAAC,CAAC;IACvE,CAAC;IAED;;;;;;;OAOG;IACH,oCAAO,GAAP,UACI,OAAoB,EACpB,QAAmB,EACnB,aAAsB;QAH1B,iBAuCC;QAnCC,mDAAmD;QACnD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC,UAAU,CAAC,EAAE,EAAE,CAAC;QACzB,CAAC;QACD,kDAAkD;QAClD,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;YACnC,IAAI,MAAI,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YAC1C,MAAI,CAAC,aAAa,GAAG,aAAa,CAAC;YACnC,MAAM,CAAC,MAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;QACrC,CAAC;QAED,iCAAiC;QACjC,IAAI,IAAI,GAAyB;YAC/B,QAAQ,EAAE,IAAI;YACd,aAAa,EAAE,aAAa;YAC5B,QAAQ,EAAE,QAAQ;YAClB,OAAO,EAAE,IAAI,OAAO,EAAe;SACpC,CAAC;QACF,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAErC,uFAAuF;QACvF,IAAI,aAAa,GAAG,UAAC,KAAiB,IAAK,OAAA,KAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,OAAO,CAAC,EAA7B,CAA6B,CAAC;QACzE,IAAI,YAAY,GAAG,UAAC,KAAiB,IAAK,OAAA,KAAI,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,EAA5B,CAA4B,CAAC;QACvE,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC;YAC7B,OAAO,CAAC,gBAAgB,CAAC,OAAO,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;YACvD,OAAO,CAAC,gBAAgB,CAAC,MAAM,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,yCAAyC;QACzC,IAAI,CAAC,QAAQ,GAAG;YACd,OAAO,CAAC,mBAAmB,CAAC,OAAO,EAAE,aAAa,EAAE,IAAI,CAAC,CAAC;YAC1D,OAAO,CAAC,mBAAmB,CAAC,MAAM,EAAE,YAAY,EAAE,IAAI,CAAC,CAAC;QAC1D,CAAC,CAAC;QAEF,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;IACrC,CAAC;IAED;;;OAGG;IACH,2CAAc,GAAd,UAAe,OAAoB;QACjC,IAAI,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;QAEjD,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;YAChB,WAAW,CAAC,QAAQ,EAAE,CAAC;YACvB,WAAW,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;YAE/B,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;YAChC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACpC,CAAC;IACH,CAAC;IAED;;;;;OAKG;IACH,qCAAQ,GAAR,UAAS,OAAoB,EAAE,QAAmB,EAAE,MAAmB;QACrE,IAAI,CAAC,8BAA8B,CAAC,MAAM,CAAC,CAAC;QAC5C,OAAO,CAAC,KAAK,EAAE,CAAC;IAClB,CAAC;IAED,qEAAqE;IAC7D,oDAAuB,GAA/B;QAAA,iBAwCC;QAvCC,mDAAmD;QACnD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,CAAC;YAC9B,MAAM,CAAC;QACT,CAAC;QAED,8FAA8F;QAC9F,eAAe;QAEf,kFAAkF;QAClF,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE;YACnC,KAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC;YAC7B,KAAI,CAAC,8BAA8B,CAAC,UAAU,CAAC,CAAC;QAClD,CAAC,EAAE,IAAI,CAAC,CAAC;QAET,0FAA0F;QAC1F,uCAAuC;QACvC,QAAQ,CAAC,gBAAgB,CAAC,WAAW,EAAE;YACrC,EAAE,CAAC,CAAC,CAAC,KAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBAC3B,KAAI,CAAC,8BAA8B,CAAC,OAAO,CAAC,CAAC;YAC/C,CAAC;QACH,CAAC,EAAE,IAAI,CAAC,CAAC;QAET,4FAA4F;QAC5F,2FAA2F;QAC3F,0BAA0B;QAC1B,QAAQ,CAAC,gBAAgB,CAAC,YAAY,EAAE,UAAC,KAAY;YACnD,EAAE,CAAC,CAAC,KAAI,CAAC,aAAa,IAAI,IAAI,CAAC,CAAC,CAAC;gBAC/B,YAAY,CAAC,KAAI,CAAC,aAAa,CAAC,CAAC;YACnC,CAAC;YACD,KAAI,CAAC,gBAAgB,GAAG,KAAK,CAAC,MAAM,CAAC;YACrC,KAAI,CAAC,aAAa,GAAG,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,gBAAgB,GAAG,IAAI,EAA5B,CAA4B,EAAE,eAAe,CAAC,CAAC;QACvF,CAAC,EAAE,IAAI,CAAC,CAAC;QAET,0FAA0F;QAC1F,mBAAmB;QACnB,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE;YAC/B,KAAI,CAAC,cAAc,GAAG,IAAI,CAAC;YAC3B,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,cAAc,GAAG,KAAK,EAA3B,CAA2B,EAAE,CAAC,CAAC,CAAC;QACnD,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACK,wCAAW,GAAnB,UAAoB,OAAoB,EAAE,MAAmB;QAC3D,IAAI,QAAQ,GAAG,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,QAAQ,CAAC;QACvD,IAAI,WAAW,GAAG,UAAC,SAAiB,EAAE,SAAkB;YACtD,SAAS,GAAG,QAAQ,CAAC,QAAQ,CAAC,OAAO,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAC,WAAW,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAC/F,CAAC,CAAC;QAEF,WAAW,CAAC,aAAa,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC;QACrC,WAAW,CAAC,mBAAmB,EAAE,MAAM,KAAK,OAAO,CAAC,CAAC;QACrD,WAAW,CAAC,sBAAsB,EAAE,MAAM,KAAK,UAAU,CAAC,CAAC;QAC3D,WAAW,CAAC,mBAAmB,EAAE,MAAM,KAAK,OAAO,CAAC,CAAC;QACrD,WAAW,CAAC,qBAAqB,EAAE,MAAM,KAAK,SAAS,CAAC,CAAC;IAC3D,CAAC;IAED;;;OAGG;IACK,2DAA8B,GAAtC,UAAuC,MAAmB;QAA1D,iBAGC;QAFC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;QACtB,UAAU,CAAC,cAAM,OAAA,KAAI,CAAC,OAAO,GAAG,IAAI,EAAnB,CAAmB,EAAE,CAAC,CAAC,CAAC;IAC3C,CAAC;IAED;;;;OAIG;IACK,8CAAiB,GAAzB,UAA0B,KAAiB;QACzC,wFAAwF;QACxF,wCAAwC;QACxC,EAAE;QACF,6CAA6C;QAC7C,iDAAiD;QACjD,SAAS;QACT,EAAE;QACF,0FAA0F;QAC1F,2FAA2F;QAC3F,yFAAyF;QACzF,gEAAgE;QAChE,wEAAwE;QACxE,EAAE;QACF,6FAA6F;QAC7F,2FAA2F;QAC3F,+FAA+F;QAC/F,cAAc;QACd,IAAI,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC;QAC/B,MAAM,CAAC,IAAI,CAAC,gBAAgB,YAAY,IAAI,IAAI,WAAW,YAAY,IAAI;YACvE,CAAC,WAAW,KAAK,IAAI,CAAC,gBAAgB,IAAI,WAAW,CAAC,QAAQ,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;IAC7F,CAAC;IAED;;;;OAIG;IACK,qCAAQ,GAAhB,UAAiB,KAAiB,EAAE,OAAoB;QACtD,4FAA4F;QAC5F,+FAA+F;QAC/F,+FAA+F;QAC/F,0EAA0E;QAE1E,gGAAgG;QAChG,4BAA4B;QAC5B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,aAAa,IAAI,OAAO,KAAK,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;YAC9E,MAAM,CAAC;QACT,CAAC;QAED,uFAAuF;QACvF,+FAA+F;QAC/F,iDAAiD;QACjD,kFAAkF;QAClF,0FAA0F;QAC1F,gBAAgB;QAChB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;YAClB,EAAE,CAAC,CAAC,IAAI,CAAC,cAAc,IAAI,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;gBACjD,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,gBAAgB,CAAC;YACvC,CAAC;YAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBACzC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;YACzB,CAAC;YAAC,IAAI,CAAC,CAAC;gBACN,IAAI,CAAC,OAAO,GAAG,SAAS,CAAC;YAC3B,CAAC;QACH,CAAC;QAED,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;QACxC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC1D,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC;QACrC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;IACtB,CAAC;IAED;;;;OAIG;IACK,oCAAO,GAAf,UAAgB,KAAiB,EAAE,OAAoB;QACrD,+FAA+F;QAC/F,yDAAyD;QACzD,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,aAAa,IAAI,KAAK,CAAC,aAAa,YAAY,IAAI;YACnF,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;YAC1C,MAAM,CAAC;QACT,CAAC;QAED,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;QAChC,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpD,CAAC;IACH,yBAAC;AAAD,CAAC,AA5PD,IA4PC;AA5PY,kBAAkB;IAD9B,UAAU,EAAE;qCAoBkB,MAAM,EAAqB,QAAQ;GAnBrD,kBAAkB,CA4P9B;SA5PY,kBAAkB;AA+P/B;;;;;;;;GAQG;AAIH,IAAa,eAAe;IAG1B,yBAAoB,WAAuB,EAAU,mBAAuC,EAChF,QAAmB;QAD/B,iBAMC;QANmB,gBAAW,GAAX,WAAW,CAAY;QAAU,wBAAmB,GAAnB,mBAAmB,CAAoB;QAFlF,mBAAc,GAAG,IAAI,YAAY,EAAe,CAAC;QAIzD,IAAI,CAAC,mBAAmB,CAAC,OAAO,CAC5B,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE,QAAQ,EACxC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,YAAY,CAAC,wBAAwB,CAAC,CAAC;aACrE,SAAS,CAAC,UAAA,MAAM,IAAI,OAAA,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,EAAhC,CAAgC,CAAC,CAAC;IAC7D,CAAC;IAED,qCAAW,GAAX;QACE,IAAI,CAAC,mBAAmB,CAAC,cAAc,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,CAAC,CAAC;IAC1E,CAAC;IACH,sBAAC;AAAD,CAAC,AAdD,IAcC;AAbW;IAAT,MAAM,EAAE;;uDAAkD;AADhD,eAAe;IAH3B,SAAS,CAAC;QACT,QAAQ,EAAE,oDAAoD;KAC/D,CAAC;qCAIiC,UAAU,EAA+B,kBAAkB;QACtE,SAAS;GAJpB,eAAe,CAc3B;SAdY,eAAe;AAiB5B,MAAM,gDACF,gBAAoC,EAAE,MAAc,EAAE,QAAkB;IAC1E,MAAM,CAAC,gBAAgB,IAAI,IAAI,kBAAkB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;AACtE,CAAC;AAGD,MAAM,CAAC,IAAM,6BAA6B,GAAG;IAC3C,8FAA8F;IAC9F,OAAO,EAAE,kBAAkB;IAC3B,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,kBAAkB,CAAC,EAAE,MAAM,EAAE,QAAQ,CAAC;IAC9E,UAAU,EAAE,qCAAqC;CAClD,CAAC","sourcesContent":["import {\r\n  Directive,\r\n  ElementRef,\r\n  EventEmitter,\r\n  Injectable,\r\n  NgZone,\r\n  OnDestroy,\r\n  Optional,\r\n  Output,\r\n  Renderer2,\r\n  SkipSelf,\r\n} from '@angular/core';\r\nimport {Observable} from 'rxjs/Observable';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport {Platform} from '../platform/platform';\r\n\r\nimport 'rxjs/add/observable/of';\r\n\r\n\r\n// This is the value used by AngularJS Material. Through trial and error (on iPhone 6S) they found\r\n// that a value of around 650ms seems appropriate.\r\nexport const TOUCH_BUFFER_MS = 650;\r\n\r\n\r\nexport type FocusOrigin = 'touch' | 'mouse' | 'keyboard' | 'program';\r\n\r\n\r\ntype MonitoredElementInfo = {\r\n  unlisten: Function,\r\n  checkChildren: boolean,\r\n  renderer: Renderer2,\r\n  subject: Subject<FocusOrigin>\r\n};\r\n\r\n\r\n/** Monitors mouse and keyboard events to determine the cause of focus events. */\r\n@Injectable()\r\nexport class FocusOriginMonitor {\r\n  /** The focus origin that the next focus event is a result of. */\r\n  private _origin: FocusOrigin = null;\r\n\r\n  /** The FocusOrigin of the last focus event tracked by the FocusOriginMonitor. */\r\n  private _lastFocusOrigin: FocusOrigin;\r\n\r\n  /** Whether the window has just been focused. */\r\n  private _windowFocused = false;\r\n\r\n  /** The target of the last touch event. */\r\n  private _lastTouchTarget: EventTarget;\r\n\r\n  /** The timeout id of the touch timeout, used to cancel timeout later. */\r\n  private _touchTimeout: number;\r\n\r\n  /** Weak map of elements being monitored to their info. */\r\n  private _elementInfo = new WeakMap<Element, MonitoredElementInfo>();\r\n\r\n  constructor(private _ngZone: NgZone, private _platform: Platform) {\r\n    this._ngZone.runOutsideAngular(() => this._registerDocumentEvents());\r\n  }\r\n\r\n  /**\r\n   * Monitors focus on an element and applies appropriate CSS classes.\r\n   * @param element The element to monitor\r\n   * @param renderer The renderer to use to apply CSS classes to the element.\r\n   * @param checkChildren Whether to count the element as focused when its children are focused.\r\n   * @returns An observable that emits when the focus state of the element changes.\r\n   *     When the element is blurred, null will be emitted.\r\n   */\r\n  monitor(\r\n      element: HTMLElement,\r\n      renderer: Renderer2,\r\n      checkChildren: boolean): Observable<FocusOrigin> {\r\n    // Do nothing if we're not on the browser platform.\r\n    if (!this._platform.isBrowser) {\r\n      return Observable.of();\r\n    }\r\n    // Check if we're already monitoring this element.\r\n    if (this._elementInfo.has(element)) {\r\n      let info = this._elementInfo.get(element);\r\n      info.checkChildren = checkChildren;\r\n      return info.subject.asObservable();\r\n    }\r\n\r\n    // Create monitored element info.\r\n    let info: MonitoredElementInfo = {\r\n      unlisten: null,\r\n      checkChildren: checkChildren,\r\n      renderer: renderer,\r\n      subject: new Subject<FocusOrigin>()\r\n    };\r\n    this._elementInfo.set(element, info);\r\n\r\n    // Start listening. We need to listen in capture phase since focus events don't bubble.\r\n    let focusListener = (event: FocusEvent) => this._onFocus(event, element);\r\n    let blurListener = (event: FocusEvent) => this._onBlur(event, element);\r\n    this._ngZone.runOutsideAngular(() => {\r\n      element.addEventListener('focus', focusListener, true);\r\n      element.addEventListener('blur', blurListener, true);\r\n    });\r\n\r\n    // Create an unlisten function for later.\r\n    info.unlisten = () => {\r\n      element.removeEventListener('focus', focusListener, true);\r\n      element.removeEventListener('blur', blurListener, true);\r\n    };\r\n\r\n    return info.subject.asObservable();\r\n  }\r\n\r\n  /**\r\n   * Stops monitoring an element and removes all focus classes.\r\n   * @param element The element to stop monitoring.\r\n   */\r\n  stopMonitoring(element: HTMLElement): void {\r\n    let elementInfo = this._elementInfo.get(element);\r\n\r\n    if (elementInfo) {\r\n      elementInfo.unlisten();\r\n      elementInfo.subject.complete();\r\n\r\n      this._setClasses(element, null);\r\n      this._elementInfo.delete(element);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Focuses the element via the specified focus origin.\r\n   * @param element The element to focus.\r\n   * @param renderer The renderer to use to invoke the focus method on the element.\r\n   * @param origin The focus origin.\r\n   */\r\n  focusVia(element: HTMLElement, renderer: Renderer2, origin: FocusOrigin): void {\r\n    this._setOriginForCurrentEventQueue(origin);\r\n    element.focus();\r\n  }\r\n\r\n  /** Register necessary event listeners on the document and window. */\r\n  private _registerDocumentEvents() {\r\n    // Do nothing if we're not on the browser platform.\r\n    if (!this._platform.isBrowser) {\r\n      return;\r\n    }\r\n\r\n    // Note: we listen to events in the capture phase so we can detect them even if the user stops\r\n    // propagation.\r\n\r\n    // On keydown record the origin and clear any touch event that may be in progress.\r\n    document.addEventListener('keydown', () => {\r\n      this._lastTouchTarget = null;\r\n      this._setOriginForCurrentEventQueue('keyboard');\r\n    }, true);\r\n\r\n    // On mousedown record the origin only if there is not touch target, since a mousedown can\r\n    // happen as a result of a touch event.\r\n    document.addEventListener('mousedown', () => {\r\n      if (!this._lastTouchTarget) {\r\n        this._setOriginForCurrentEventQueue('mouse');\r\n      }\r\n    }, true);\r\n\r\n    // When the touchstart event fires the focus event is not yet in the event queue. This means\r\n    // we can't rely on the trick used above (setting timeout of 0ms). Instead we wait 650ms to\r\n    // see if a focus happens.\r\n    document.addEventListener('touchstart', (event: Event) => {\r\n      if (this._touchTimeout != null) {\r\n        clearTimeout(this._touchTimeout);\r\n      }\r\n      this._lastTouchTarget = event.target;\r\n      this._touchTimeout = setTimeout(() => this._lastTouchTarget = null, TOUCH_BUFFER_MS);\r\n    }, true);\r\n\r\n    // Make a note of when the window regains focus, so we can restore the origin info for the\r\n    // focused element.\r\n    window.addEventListener('focus', () => {\r\n      this._windowFocused = true;\r\n      setTimeout(() => this._windowFocused = false, 0);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Sets the focus classes on the element based on the given focus origin.\r\n   * @param element The element to update the classes on.\r\n   * @param origin The focus origin.\r\n   */\r\n  private _setClasses(element: HTMLElement, origin: FocusOrigin): void {\r\n    let renderer = this._elementInfo.get(element).renderer;\r\n    let toggleClass = (className: string, shouldSet: boolean) => {\r\n      shouldSet ? renderer.addClass(element, className) : renderer.removeClass(element, className);\r\n    };\r\n\r\n    toggleClass('cdk-focused', !!origin);\r\n    toggleClass('cdk-touch-focused', origin === 'touch');\r\n    toggleClass('cdk-keyboard-focused', origin === 'keyboard');\r\n    toggleClass('cdk-mouse-focused', origin === 'mouse');\r\n    toggleClass('cdk-program-focused', origin === 'program');\r\n  }\r\n\r\n  /**\r\n   * Sets the origin and schedules an async function to clear it at the end of the event queue.\r\n   * @param origin The origin to set.\r\n   */\r\n  private _setOriginForCurrentEventQueue(origin: FocusOrigin): void {\r\n    this._origin = origin;\r\n    setTimeout(() => this._origin = null, 0);\r\n  }\r\n\r\n  /**\r\n   * Checks whether the given focus event was caused by a touchstart event.\r\n   * @param event The focus event to check.\r\n   * @returns Whether the event was caused by a touch.\r\n   */\r\n  private _wasCausedByTouch(event: FocusEvent): boolean {\r\n    // Note(mmalerba): This implementation is not quite perfect, there is a small edge case.\r\n    // Consider the following dom structure:\r\n    //\r\n    // <div #parent tabindex=\"0\" cdkFocusClasses>\r\n    //   <div #child (click)=\"#parent.focus()\"></div>\r\n    // </div>\r\n    //\r\n    // If the user touches the #child element and the #parent is programmatically focused as a\r\n    // result, this code will still consider it to have been caused by the touch event and will\r\n    // apply the cdk-touch-focused class rather than the cdk-program-focused class. This is a\r\n    // relatively small edge-case that can be worked around by using\r\n    // focusVia(parentEl, renderer,  'program') to focus the parent element.\r\n    //\r\n    // If we decide that we absolutely must handle this case correctly, we can do so by listening\r\n    // for the first focus event after the touchstart, and then the first blur event after that\r\n    // focus event. When that blur event fires we know that whatever follows is not a result of the\r\n    // touchstart.\r\n    let focusTarget = event.target;\r\n    return this._lastTouchTarget instanceof Node && focusTarget instanceof Node &&\r\n        (focusTarget === this._lastTouchTarget || focusTarget.contains(this._lastTouchTarget));\r\n  }\r\n\r\n  /**\r\n   * Handles focus events on a registered element.\r\n   * @param event The focus event.\r\n   * @param element The monitored element.\r\n   */\r\n  private _onFocus(event: FocusEvent, element: HTMLElement) {\r\n    // NOTE(mmalerba): We currently set the classes based on the focus origin of the most recent\r\n    // focus event affecting the monitored element. If we want to use the origin of the first event\r\n    // instead we should check for the cdk-focused class here and return if the element already has\r\n    // it. (This only matters for elements that have includesChildren = true).\r\n\r\n    // If we are not counting child-element-focus as focused, make sure that the event target is the\r\n    // monitored element itself.\r\n    if (!this._elementInfo.get(element).checkChildren && element !== event.target) {\r\n      return;\r\n    }\r\n\r\n    // If we couldn't detect a cause for the focus event, it's due to one of three reasons:\r\n    // 1) The window has just regained focus, in which case we want to restore the focused state of\r\n    //    the element from before the window blurred.\r\n    // 2) It was caused by a touch event, in which case we mark the origin as 'touch'.\r\n    // 3) The element was programmatically focused, in which case we should mark the origin as\r\n    //    'program'.\r\n    if (!this._origin) {\r\n      if (this._windowFocused && this._lastFocusOrigin) {\r\n        this._origin = this._lastFocusOrigin;\r\n      } else if (this._wasCausedByTouch(event)) {\r\n        this._origin = 'touch';\r\n      } else {\r\n        this._origin = 'program';\r\n      }\r\n    }\r\n\r\n    this._setClasses(element, this._origin);\r\n    this._elementInfo.get(element).subject.next(this._origin);\r\n    this._lastFocusOrigin = this._origin;\r\n    this._origin = null;\r\n  }\r\n\r\n  /**\r\n   * Handles blur events on a registered element.\r\n   * @param event The blur event.\r\n   * @param element The monitored element.\r\n   */\r\n  private _onBlur(event: FocusEvent, element: HTMLElement) {\r\n    // If we are counting child-element-focus as focused, make sure that we aren't just blurring in\r\n    // order to focus another child of the monitored element.\r\n    if (this._elementInfo.get(element).checkChildren && event.relatedTarget instanceof Node &&\r\n        element.contains(event.relatedTarget)) {\r\n      return;\r\n    }\r\n\r\n    this._setClasses(element, null);\r\n    this._elementInfo.get(element).subject.next(null);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Directive that determines how a particular element was focused (via keyboard, mouse, touch, or\r\n * programmatically) and adds corresponding classes to the element.\r\n *\r\n * There are two variants of this directive:\r\n * 1) cdkMonitorElementFocus: does not consider an element to be focused if one of its children is\r\n *    focused.\r\n * 2) cdkMonitorSubtreeFocus: considers an element focused if it or any of its children are focused.\r\n */\r\n@Directive({\r\n  selector: '[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]',\r\n})\r\nexport class CdkMonitorFocus implements OnDestroy {\r\n  @Output() cdkFocusChange = new EventEmitter<FocusOrigin>();\r\n\r\n  constructor(private _elementRef: ElementRef, private _focusOriginMonitor: FocusOriginMonitor,\r\n              renderer: Renderer2) {\r\n    this._focusOriginMonitor.monitor(\r\n        this._elementRef.nativeElement, renderer,\r\n        this._elementRef.nativeElement.hasAttribute('cdkMonitorSubtreeFocus'))\r\n        .subscribe(origin => this.cdkFocusChange.emit(origin));\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this._focusOriginMonitor.stopMonitoring(this._elementRef.nativeElement);\r\n  }\r\n}\r\n\r\n\r\nexport function FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY(\r\n    parentDispatcher: FocusOriginMonitor, ngZone: NgZone, platform: Platform) {\r\n  return parentDispatcher || new FocusOriginMonitor(ngZone, platform);\r\n}\r\n\r\n\r\nexport const FOCUS_ORIGIN_MONITOR_PROVIDER = {\r\n  // If there is already a FocusOriginMonitor available, use that. Otherwise, provide a new one.\r\n  provide: FocusOriginMonitor,\r\n  deps: [[new Optional(), new SkipSelf(), FocusOriginMonitor], NgZone, Platform],\r\n  useFactory: FOCUS_ORIGIN_MONITOR_PROVIDER_FACTORY\r\n};\r\n"]}