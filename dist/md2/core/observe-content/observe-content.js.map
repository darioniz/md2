{"version":3,"file":"observe-content.js","sourceRoot":"","sources":["../../../../src/lib/core/observe-content/observe-content.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EACL,SAAS,EACT,UAAU,EACV,QAAQ,EACR,MAAM,EACN,KAAK,EACL,YAAY,EAGZ,UAAU,GACX,MAAM,eAAe,CAAC;AACvB,OAAO,EAAC,OAAO,EAAC,MAAM,cAAc,CAAC;AACrC,OAAO,gCAAgC,CAAC;AAExC;;;GAGG;AAEH,IAAa,yBAAyB;IAAtC;IAIA,CAAC;IAHC,0CAAM,GAAN,UAAO,QAAa;QAClB,MAAM,CAAC,IAAI,gBAAgB,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;IACH,gCAAC;AAAD,CAAC,AAJD,IAIC;AAJY,yBAAyB;IADrC,UAAU,EAAE;GACA,yBAAyB,CAIrC;SAJY,yBAAyB;AAMtC;;;GAGG;AAIH,IAAa,cAAc;IAYzB,wBACU,wBAAmD,EACnD,WAAuB;QADvB,6BAAwB,GAAxB,wBAAwB,CAA2B;QACnD,gBAAW,GAAX,WAAW,CAAY;QAXjC,8DAA8D;QACjC,UAAK,GAAG,IAAI,YAAY,EAAoB,CAAC;QAE1E,0EAA0E;QAClE,eAAU,GAAG,IAAI,OAAO,EAAoB,CAAC;IAOhB,CAAC;IAEtC,2CAAkB,GAAlB;QAAA,iBAkBC;QAjBC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,CAAC,CAAC;YACtB,IAAI,CAAC,UAAU;iBACZ,YAAY,CAAC,IAAI,CAAC,QAAQ,CAAC;iBAC3B,SAAS,CAAC,UAAA,SAAS,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,EAA1B,CAA0B,CAAC,CAAC;QACxD,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,UAAA,SAAS,IAAI,OAAA,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,EAA1B,CAA0B,CAAC,CAAC;QACrE,CAAC;QAED,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,wBAAwB,CAAC,MAAM,CAAC,UAAC,SAA2B;YAChF,KAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QAEH,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,aAAa,EAAE;YACrD,aAAa,EAAE,IAAI;YACnB,SAAS,EAAE,IAAI;YACf,OAAO,EAAE,IAAI;SACd,CAAC,CAAC;IACL,CAAC;IAED,oCAAW,GAAX;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;YACnB,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,CAAC;YAC5B,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,CAAC;YAC3B,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QAC1C,CAAC;IACH,CAAC;IACH,qBAAC;AAAD,CAAC,AA3CD,IA2CC;AAvC8B;IAA5B,MAAM,CAAC,mBAAmB,CAAC;;6CAA8C;AAMjE;IAAR,KAAK,EAAE;;gDAAkB;AAVf,cAAc;IAH1B,SAAS,CAAC;QACT,QAAQ,EAAE,qBAAqB;KAChC,CAAC;qCAcoC,yBAAyB;QACtC,UAAU;GAdtB,cAAc,CA2C1B;SA3CY,cAAc;AAmD3B,IAAa,oBAAoB;IAAjC;IAAmC,CAAC;IAAD,2BAAC;AAAD,CAAC,AAApC,IAAoC;AAAvB,oBAAoB;IALhC,QAAQ,CAAC;QACR,OAAO,EAAE,CAAC,cAAc,CAAC;QACzB,YAAY,EAAE,CAAC,cAAc,CAAC;QAC9B,SAAS,EAAE,CAAC,yBAAyB,CAAC;KACvC,CAAC;GACW,oBAAoB,CAAG;SAAvB,oBAAoB","sourcesContent":["import {\r\n  Directive,\r\n  ElementRef,\r\n  NgModule,\r\n  Output,\r\n  Input,\r\n  EventEmitter,\r\n  OnDestroy,\r\n  AfterContentInit,\r\n  Injectable,\r\n} from '@angular/core';\r\nimport {Subject} from 'rxjs/Subject';\r\nimport 'rxjs/add/operator/debounceTime';\r\n\r\n/**\r\n * Factory that creates a new MutationObserver and allows us to stub it out in unit tests.\r\n * @docs-private\r\n */\r\n@Injectable()\r\nexport class MdMutationObserverFactory {\r\n  create(callback: any): MutationObserver {\r\n    return new MutationObserver(callback);\r\n  }\r\n}\r\n\r\n/**\r\n * Directive that triggers a callback whenever the content of\r\n * its associated element has changed.\r\n */\r\n@Directive({\r\n  selector: '[cdkObserveContent]'\r\n})\r\nexport class ObserveContent implements AfterContentInit, OnDestroy {\r\n  private _observer: MutationObserver;\r\n\r\n  /** Event emitted for each change in the element's content. */\r\n  @Output('cdkObserveContent') event = new EventEmitter<MutationRecord[]>();\r\n\r\n  /** Used for debouncing the emitted values to the observeContent event. */\r\n  private _debouncer = new Subject<MutationRecord[]>();\r\n\r\n  /** Debounce interval for emitting the changes. */\r\n  @Input() debounce: number;\r\n\r\n  constructor(\r\n    private _mutationObserverFactory: MdMutationObserverFactory,\r\n    private _elementRef: ElementRef) { }\r\n\r\n  ngAfterContentInit() {\r\n    if (this.debounce > 0) {\r\n      this._debouncer\r\n        .debounceTime(this.debounce)\r\n        .subscribe(mutations => this.event.emit(mutations));\r\n    } else {\r\n      this._debouncer.subscribe(mutations => this.event.emit(mutations));\r\n    }\r\n\r\n    this._observer = this._mutationObserverFactory.create((mutations: MutationRecord[]) => {\r\n      this._debouncer.next(mutations);\r\n    });\r\n\r\n    this._observer.observe(this._elementRef.nativeElement, {\r\n      characterData: true,\r\n      childList: true,\r\n      subtree: true\r\n    });\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this._observer) {\r\n      this._observer.disconnect();\r\n      this._debouncer.complete();\r\n      this._debouncer = this._observer = null;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n@NgModule({\r\n  exports: [ObserveContent],\r\n  declarations: [ObserveContent],\r\n  providers: [MdMutationObserverFactory]\r\n})\r\nexport class ObserveContentModule {}\r\n"]}