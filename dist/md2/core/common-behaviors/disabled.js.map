{"version":3,"file":"disabled.js","sourceRoot":"","sources":["../../../../src/lib/core/common-behaviors/disabled.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAC,qBAAqB,EAAC,MAAM,8BAA8B,CAAC;AAWnE,+DAA+D;AAC/D,MAAM,wBAAmD,IAAO;IAC9D,MAAM;QAAe,2BAAI;QAMvB;YAAY,cAAc;iBAAd,UAAc,EAAd,qBAAc,EAAd,IAAc;gBAAd,yBAAc;;YAA1B,+BAAuC,IAAI,UAAI;YALvC,eAAS,GAAY,KAAK,CAAC;;QAKW,CAAC;QAH/C,sBAAI,6BAAQ;iBAAZ,cAAiB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;iBACzC,UAAa,KAAU,IAAI,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;;WADlC;QAI3C,cAAC;IAAD,CAAC,AAPM,CAAc,IAAI,GAOvB;AACJ,CAAC","sourcesContent":["import {coerceBooleanProperty} from '../coercion/boolean-property';\r\n\r\n\r\n/** @docs-private */\r\nexport type Constructor<T> = new(...args: any[]) => T;\r\n\r\n/** @docs-private */\r\nexport interface CanDisable {\r\n  disabled: boolean;\r\n}\r\n\r\n/** Mixin to augment a directive with a `disabled` property. */\r\nexport function mixinDisabled<T extends Constructor<{}>>(base: T): Constructor<CanDisable> & T {\r\n  return class extends base {\r\n    private _disabled: boolean = false;\r\n\r\n    get disabled() { return this._disabled; }\r\n    set disabled(value: any) { this._disabled = coerceBooleanProperty(value); }\r\n\r\n    constructor(...args: any[]) { super(...args); }\r\n  };\r\n}\r\n"]}